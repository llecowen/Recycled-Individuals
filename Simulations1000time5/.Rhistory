###GJSTL5 N=1000, T=1, t=5
assign(paste("ESTS5.",m,sep=""),colMeans(get(paste("tableESTS5.",m,sep=""))))
assign(paste("ESTSrecycled5.",m,sep=""),colMeans(get(paste("tableESTSrecycled5.",m,sep=""))))
assign(paste("SE5.",m,sep=""),colMeans(get(paste("tableSE5.",m,sep="")),na.rm=TRUE))
assign(paste("SErecycled5.",m,sep=""),colMeans(get(paste("tableSErecycled5.",m,sep="")),na.rm=TRUE))
###GJSTL6 N=1000, T=1, t=7
assign(paste("ESTS6.",m,sep=""),colMeans(get(paste("tableESTS6.",m,sep=""))))
assign(paste("ESTSrecycled6.",m,sep=""),colMeans(get(paste("tableESTSrecycled6.",m,sep=""))))
assign(paste("SE6.",m,sep=""),colMeans(get(paste("tableSE6.",m,sep="")),na.rm=TRUE))
assign(paste("SErecycled6.",m,sep=""),colMeans(get(paste("tableSErecycled6.",m,sep="")),na.rm=TRUE))
m=m+1
if(m>27){break}
}
##Reads in data and creates matrices of estimates and standard errors for 4 GJSTL situation for N=1000,100000 and T=1,0.5
## tableESTS{GJSTL}.{modelnum} - matrix of estimates without recycled individuals for {GJSTL} and {modelnum}
## tableESTSrecycled{GJSTL}.{modelnum} - matrix of estimates with recycled individuals for {GJSTL} and {modelnum}
## tableSE{GJSTL}.{modelnum} - matrix of standard errors without recycled individuals for {GJSTL} and {modelnum}
## tableESTSrecycled{GJSTL}.{modelnum} - matrix of standard erros with recycled individuals for {GJSTL} and {modelnum}
m=1
repeat{
###GSTL1 N=1000, T=1
assign(paste("tableESTS1.",m,sep=""),read.table(paste("~/Dropbox/Project/Simulations1000/",m,".ests.txt",sep=""), sep=" "))
assign(paste("tableESTSrecycled1.",m,sep=""),read.table(paste("~/Dropbox/Project/Simulations1000/",m,".estsRECYCLED.txt",sep=""), sep=" "))
assign(paste("tableSE1.",m,sep=""),read.table(paste("~/Dropbox/Project/Simulations1000/",m,".se.txt",sep=""), sep=" "))
assign(paste("tableSErecycled1.",m,sep=""),read.table(paste("~/Dropbox/Project/Simulations1000/",m,".seRECYCLED.txt",sep=""), sep=" "))
###GSTL2 N=100000, T=1
assign(paste("tableESTS2.",m,sep=""),read.table(paste("~/Dropbox/Project/Simulations100000/",m,".ests.txt",sep=""), sep=" "))
assign(paste("tableESTSrecycled2.",m,sep=""),read.table(paste("~/Dropbox/Project/Simulations100000/",m,".estsRECYCLED.txt",sep=""), sep=" "))
assign(paste("tableSE2.",m,sep=""),read.table(paste("~/Dropbox/Project/Simulations100000/",m,".se.txt",sep=""), sep=" "))
assign(paste("tableSErecycled2.",m,sep=""),read.table(paste("~/Dropbox/Project/Simulations100000/",m,".seRECYCLED.txt",sep=""), sep=" "))
###GJSTL3 N=100000, T=0.5
assign(paste("tableESTS3.",m,sep=""),read.table(paste("~/Dropbox/Project/Simulations100000HALF/",m,".ests.txt",sep=""), sep=" "))
assign(paste("tableESTSrecycled3.",m,sep=""),read.table(paste("~/Dropbox/Project/Simulations100000HALF/",m,".estsRECYCLED.txt",sep=""), sep=" "))
assign(paste("tableSE3.",m,sep=""),read.table(paste("~/Dropbox/Project/Simulations100000HALF/",m,".se.txt",sep=""), sep=" "))
assign(paste("tableSErecycled3.",m,sep=""),read.table(paste("~/Dropbox/Project/Simulations100000HALF/",m,".seRECYCLED.txt",sep=""), sep=" "))
###GJSTL4 N=1000, T=0.5
assign(paste("tableESTS4.",m,sep=""),read.table(paste("~/Dropbox/Project/Simulations1000HALF/",m,".ests.txt",sep=""), sep=" "))
assign(paste("tableESTSrecycled4.",m,sep=""),read.table(paste("~/Dropbox/Project/Simulations1000HALF/",m,".estsRECYCLED.txt",sep=""), sep=" "))
assign(paste("tableSE4.",m,sep=""),read.table(paste("~/Dropbox/Project/Simulations1000HALF/",m,".se.txt",sep=""), sep=" "))
assign(paste("tableSErecycled4.",m,sep=""),read.table(paste("~/Dropbox/Project/Simulations1000HALF/",m,".seRECYCLED.txt",sep=""), sep=" "))
###GJSTL5 N=1000, T=1, t=5
assign(paste("tableESTS5.",m,sep=""),read.table(paste("~/Dropbox/Project/Simulations1000time5/",m,".ests.txt",sep=""), sep=" "))
assign(paste("tableESTSrecycled5.",m,sep=""),read.table(paste("~/Dropbox/Project/Simulations1000time5/",m,".estsRECYCLED.txt",sep=""), sep=" "))
assign(paste("tableSE5.",m,sep=""),read.table(paste("~/Dropbox/Project/Simulations1000time5/",m,".se.txt",sep=""), sep=" "))
assign(paste("tableSErecycled5.",m,sep=""),read.table(paste("~/Dropbox/Project/Simulations1000time5/",m,".seRECYCLED.txt",sep=""), sep=" "))
###GJSTL6 N=1000, T=1, t=7
assign(paste("tableESTS6.",m,sep=""),read.table(paste("~/Dropbox/Project/Simulations1000time7/",m,".ests.txt",sep=""), sep=" "))
assign(paste("tableESTSrecycled6.",m,sep=""),read.table(paste("~/Dropbox/Project/Simulations1000time7/",m,".estsRECYCLED.txt",sep=""), sep=" "))
assign(paste("tableSE6.",m,sep=""),read.table(paste("~/Dropbox/Project/Simulations1000time7/",m,".se.txt",sep=""), sep=" "))
assign(paste("tableSErecycled6.",m,sep=""),read.table(paste("~/Dropbox/Project/Simulations1000time7/",m,".seRECYCLED.txt",sep=""), sep=" "))
m=m+1
if(m>27){break}
}
#compute column means for estimates and standard errors for all parameter combinations
m=1
repeat{
###GSTL1 N=1000, T=1
assign(paste("ESTS1.",m,sep=""),colMeans(get(paste("tableESTS1.",m,sep=""))))
assign(paste("ESTSrecycled1.",m,sep=""),colMeans(get(paste("tableESTSrecycled1.",m,sep=""))))
assign(paste("SE1.",m,sep=""),colMeans(get(paste("tableSE1.",m,sep="")),na.rm=TRUE))
assign(paste("SErecycled1.",m,sep=""),colMeans(get(paste("tableSErecycled1.",m,sep="")),na.rm=TRUE))
###GSTL2 N=100000, T=1
assign(paste("ESTS2.",m,sep=""),colMeans(get(paste("tableESTS2.",m,sep=""))))
assign(paste("ESTSrecycled2.",m,sep=""),colMeans(get(paste("tableESTSrecycled2.",m,sep=""))))
assign(paste("SE2.",m,sep=""),colMeans(get(paste("tableSE2.",m,sep="")),na.rm=TRUE))
assign(paste("SErecycled2.",m,sep=""),colMeans(get(paste("tableSErecycled2.",m,sep="")),na.rm=TRUE))
###GJSTL3 N=100000, T=0.5
assign(paste("ESTS3.",m,sep=""),colMeans(get(paste("tableESTS3.",m,sep=""))))
assign(paste("ESTSrecycled3.",m,sep=""),colMeans(get(paste("tableESTSrecycled3.",m,sep="")),na.rm=TRUE))
assign(paste("SE3.",m,sep=""),colMeans(get(paste("tableSE3.",m,sep=""))))
assign(paste("SErecycled3.",m,sep=""),colMeans(get(paste("tableSErecycled3.",m,sep="")),na.rm=TRUE))
###GJSTL4 N=1000, T=0.5
assign(paste("ESTS4.",m,sep=""),colMeans(get(paste("tableESTS4.",m,sep=""))))
assign(paste("ESTSrecycled4.",m,sep=""),colMeans(get(paste("tableESTSrecycled4.",m,sep=""))))
assign(paste("SE4.",m,sep=""),colMeans(get(paste("tableSE4.",m,sep="")),na.rm=TRUE))
assign(paste("SErecycled4.",m,sep=""),colMeans(get(paste("tableErecycled4.",m,sep="")),na.rm=TRUE))
###GJSTL5 N=1000, T=1, t=5
assign(paste("ESTS5.",m,sep=""),colMeans(get(paste("tableESTS5.",m,sep=""))))
assign(paste("ESTSrecycled5.",m,sep=""),colMeans(get(paste("tableESTSrecycled5.",m,sep=""))))
assign(paste("SE5.",m,sep=""),colMeans(get(paste("tableSE5.",m,sep="")),na.rm=TRUE))
assign(paste("SErecycled5.",m,sep=""),colMeans(get(paste("tableSErecycled5.",m,sep="")),na.rm=TRUE))
###GJSTL6 N=1000, T=1, t=7
assign(paste("ESTS6.",m,sep=""),colMeans(get(paste("tableESTS6.",m,sep=""))))
assign(paste("ESTSrecycled6.",m,sep=""),colMeans(get(paste("tableESTSrecycled6.",m,sep=""))))
assign(paste("SE6.",m,sep=""),colMeans(get(paste("tableSE6.",m,sep="")),na.rm=TRUE))
assign(paste("SErecycled6.",m,sep=""),colMeans(get(paste("tableSErecycled6.",m,sep="")),na.rm=TRUE))
m=m+1
if(m>27){break}
}
#compute column means for estimates and standard errors for all parameter combinations
m=1
repeat{
###GSTL1 N=1000, T=1
assign(paste("ESTS1.",m,sep=""),colMeans(get(paste("tableESTS1.",m,sep=""))))
assign(paste("ESTSrecycled1.",m,sep=""),colMeans(get(paste("tableESTSrecycled1.",m,sep=""))))
assign(paste("SE1.",m,sep=""),colMeans(get(paste("tableSE1.",m,sep="")),na.rm=TRUE))
assign(paste("SErecycled1.",m,sep=""),colMeans(get(paste("tableSErecycled1.",m,sep="")),na.rm=TRUE))
###GSTL2 N=100000, T=1
assign(paste("ESTS2.",m,sep=""),colMeans(get(paste("tableESTS2.",m,sep=""))))
assign(paste("ESTSrecycled2.",m,sep=""),colMeans(get(paste("tableESTSrecycled2.",m,sep=""))))
assign(paste("SE2.",m,sep=""),colMeans(get(paste("tableSE2.",m,sep="")),na.rm=TRUE))
assign(paste("SErecycled2.",m,sep=""),colMeans(get(paste("tableSErecycled2.",m,sep="")),na.rm=TRUE))
###GJSTL3 N=100000, T=0.5
assign(paste("ESTS3.",m,sep=""),colMeans(get(paste("tableESTS3.",m,sep=""))))
assign(paste("ESTSrecycled3.",m,sep=""),colMeans(get(paste("tableESTSrecycled3.",m,sep="")),na.rm=TRUE))
assign(paste("SE3.",m,sep=""),colMeans(get(paste("tableSE3.",m,sep=""))))
assign(paste("SErecycled3.",m,sep=""),colMeans(get(paste("tableSErecycled3.",m,sep="")),na.rm=TRUE))
###GJSTL4 N=1000, T=0.5
assign(paste("ESTS4.",m,sep=""),colMeans(get(paste("tableESTS4.",m,sep=""))))
assign(paste("ESTSrecycled4.",m,sep=""),colMeans(get(paste("tableESTSrecycled4.",m,sep=""))))
assign(paste("SE4.",m,sep=""),colMeans(get(paste("tableSE4.",m,sep="")),na.rm=TRUE))
assign(paste("SErecycled4.",m,sep=""),colMeans(get(paste("tablerecycled4.",m,sep="")),na.rm=TRUE))
###GJSTL5 N=1000, T=1, t=5
assign(paste("ESTS5.",m,sep=""),colMeans(get(paste("tableESTS5.",m,sep=""))))
assign(paste("ESTSrecycled5.",m,sep=""),colMeans(get(paste("tableESTSrecycled5.",m,sep=""))))
assign(paste("SE5.",m,sep=""),colMeans(get(paste("tableSE5.",m,sep="")),na.rm=TRUE))
assign(paste("SErecycled5.",m,sep=""),colMeans(get(paste("tableSErecycled5.",m,sep="")),na.rm=TRUE))
###GJSTL6 N=1000, T=1, t=7
assign(paste("ESTS6.",m,sep=""),colMeans(get(paste("tableESTS6.",m,sep=""))))
assign(paste("ESTSrecycled6.",m,sep=""),colMeans(get(paste("tableESTSrecycled6.",m,sep=""))))
assign(paste("SE6.",m,sep=""),colMeans(get(paste("tableSE6.",m,sep="")),na.rm=TRUE))
assign(paste("SErecycled6.",m,sep=""),colMeans(get(paste("tableSErecycled6.",m,sep="")),na.rm=TRUE))
m=m+1
if(m>27){break}
}
#compute column means for estimates and standard errors for all parameter combinations
m=1
repeat{
###GSTL1 N=1000, T=1
assign(paste("ESTS1.",m,sep=""),colMeans(get(paste("tableESTS1.",m,sep=""))))
assign(paste("ESTSrecycled1.",m,sep=""),colMeans(get(paste("tableESTSrecycled1.",m,sep=""))))
assign(paste("SE1.",m,sep=""),colMeans(get(paste("tableSE1.",m,sep="")),na.rm=TRUE))
assign(paste("SErecycled1.",m,sep=""),colMeans(get(paste("tableSErecycled1.",m,sep="")),na.rm=TRUE))
###GSTL2 N=100000, T=1
assign(paste("ESTS2.",m,sep=""),colMeans(get(paste("tableESTS2.",m,sep=""))))
assign(paste("ESTSrecycled2.",m,sep=""),colMeans(get(paste("tableESTSrecycled2.",m,sep=""))))
assign(paste("SE2.",m,sep=""),colMeans(get(paste("tableSE2.",m,sep="")),na.rm=TRUE))
assign(paste("SErecycled2.",m,sep=""),colMeans(get(paste("tableSErecycled2.",m,sep="")),na.rm=TRUE))
###GJSTL3 N=100000, T=0.5
assign(paste("ESTS3.",m,sep=""),colMeans(get(paste("tableESTS3.",m,sep=""))))
assign(paste("ESTSrecycled3.",m,sep=""),colMeans(get(paste("tableESTSrecycled3.",m,sep="")),na.rm=TRUE))
assign(paste("SE3.",m,sep=""),colMeans(get(paste("tableSE3.",m,sep=""))))
assign(paste("SErecycled3.",m,sep=""),colMeans(get(paste("tableSErecycled3.",m,sep="")),na.rm=TRUE))
###GJSTL4 N=1000, T=0.5
assign(paste("ESTS4.",m,sep=""),colMeans(get(paste("tableESTS4.",m,sep=""))))
assign(paste("ESTSrecycled4.",m,sep=""),colMeans(get(paste("tableESTSrecycled4.",m,sep=""))))
assign(paste("SE4.",m,sep=""),colMeans(get(paste("tableSE4.",m,sep="")),na.rm=TRUE))
assign(paste("SErecycled4.",m,sep=""),colMeans(get(paste("tablerecycled4.",m,sep="")),na.rm=TRUE))
###GJSTL5 N=1000, T=1, t=5
assign(paste("ESTS5.",m,sep=""),colMeans(get(paste("tableESTS5.",m,sep=""))))
assign(paste("ESTSrecycled5.",m,sep=""),colMeans(get(paste("tableESTSrecycled5.",m,sep=""))))
assign(paste("SE5.",m,sep=""),colMeans(get(paste("tableSE5.",m,sep="")),na.rm=TRUE))
assign(paste("SErecycled5.",m,sep=""),colMeans(get(paste("tableSErecycled5.",m,sep="")),na.rm=TRUE))
###GJSTL6 N=1000, T=1, t=7
assign(paste("ESTS6.",m,sep=""),colMeans(get(paste("tableESTS6.",m,sep=""))))
assign(paste("ESTSrecycled6.",m,sep=""),colMeans(get(paste("tableESTSrecycled6.",m,sep=""))))
assign(paste("SE6.",m,sep=""),colMeans(get(paste("tableSE6.",m,sep="")),na.rm=TRUE))
assign(paste("SErecycled6.",m,sep=""),colMeans(get(paste("tableSErecycled6.",m,sep="")),na.rm=TRUE))
m=m+1
if(m>27){break}
}
#compute column means for estimates and standard errors for all parameter combinations
m=1
repeat{
###GSTL1 N=1000, T=1
assign(paste("ESTS1.",m,sep=""),colMeans(get(paste("tableESTS1.",m,sep=""))))
assign(paste("ESTSrecycled1.",m,sep=""),colMeans(get(paste("tableESTSrecycled1.",m,sep=""))))
assign(paste("SE1.",m,sep=""),colMeans(get(paste("tableSE1.",m,sep="")),na.rm=TRUE))
assign(paste("SErecycled1.",m,sep=""),colMeans(get(paste("tableSErecycled1.",m,sep="")),na.rm=TRUE))
###GSTL2 N=100000, T=1
assign(paste("ESTS2.",m,sep=""),colMeans(get(paste("tableESTS2.",m,sep=""))))
assign(paste("ESTSrecycled2.",m,sep=""),colMeans(get(paste("tableESTSrecycled2.",m,sep=""))))
assign(paste("SE2.",m,sep=""),colMeans(get(paste("tableSE2.",m,sep="")),na.rm=TRUE))
assign(paste("SErecycled2.",m,sep=""),colMeans(get(paste("tableSErecycled2.",m,sep="")),na.rm=TRUE))
###GJSTL3 N=100000, T=0.5
assign(paste("ESTS3.",m,sep=""),colMeans(get(paste("tableESTS3.",m,sep=""))))
assign(paste("ESTSrecycled3.",m,sep=""),colMeans(get(paste("tableESTSrecycled3.",m,sep="")),na.rm=TRUE))
assign(paste("SE3.",m,sep=""),colMeans(get(paste("tableSE3.",m,sep=""))))
assign(paste("SErecycled3.",m,sep=""),colMeans(get(paste("tableSErecycled3.",m,sep="")),na.rm=TRUE))
###GJSTL4 N=1000, T=0.5
assign(paste("ESTS4.",m,sep=""),colMeans(get(paste("tableESTS4.",m,sep=""))))
assign(paste("ESTSrecycled4.",m,sep=""),colMeans(get(paste("tableESTSrecycled4.",m,sep=""))))
assign(paste("SE4.",m,sep=""),colMeans(get(paste("tableSE4.",m,sep="")),na.rm=TRUE))
assign(paste("SErecycled4.",m,sep=""),colMeans(get(paste("tableSErecycled4.",m,sep="")),na.rm=TRUE))
###GJSTL5 N=1000, T=1, t=5
assign(paste("ESTS5.",m,sep=""),colMeans(get(paste("tableESTS5.",m,sep=""))))
assign(paste("ESTSrecycled5.",m,sep=""),colMeans(get(paste("tableESTSrecycled5.",m,sep=""))))
assign(paste("SE5.",m,sep=""),colMeans(get(paste("tableSE5.",m,sep="")),na.rm=TRUE))
assign(paste("SErecycled5.",m,sep=""),colMeans(get(paste("tableSErecycled5.",m,sep="")),na.rm=TRUE))
###GJSTL6 N=1000, T=1, t=7
assign(paste("ESTS6.",m,sep=""),colMeans(get(paste("tableESTS6.",m,sep=""))))
assign(paste("ESTSrecycled6.",m,sep=""),colMeans(get(paste("tableESTSrecycled6.",m,sep=""))))
assign(paste("SE6.",m,sep=""),colMeans(get(paste("tableSE6.",m,sep="")),na.rm=TRUE))
assign(paste("SErecycled6.",m,sep=""),colMeans(get(paste("tableSErecycled6.",m,sep="")),na.rm=TRUE))
m=m+1
if(m>27){break}
}
tableESTS1
tableESTS1.1
dim(tableESTS1.1)
dim(tableESTS1.4)
dim(tableESTS1.5)
dim(tableESTS1.6)
#compute sd for all parameter combinations
m=1
repeat{
###GSTL1 N=1000, T=1
assign(paste("SD1.",m,sep=""),sapply(get(paste("tableESTS1.",m,sep=""))[1:24],sd))
assign(paste("SDrecycled1.",m,sep=""),sapply(get(paste("tableESTSrecycled1.",m,sep=""))[1:24],sd))
###GSTL2 N=100000, T=1
assign(paste("SD2.",m,sep=""),sapply(get(paste("tableESTS2.",m,sep=""))[1:24],sd))
assign(paste("SDrecycled2.",m,sep=""),sapply(get(paste("tableESTSrecycled2.",m,sep=""))[1:24],sd))
###GJSTL3 N=100000, T=0.5
assign(paste("SD3.",m,sep=""),sapply(get(paste("tableESTS3.",m,sep=""))[1:24],sd))
assign(paste("SDrecycled3.",m,sep=""),sapply(get(paste("tableESTSrecycled3.",m,sep=""))[1:24],sd))
###GJSTL4 N=1000, T=0.5
assign(paste("SD4.",m,sep=""),sapply(get(paste("tableESTS4.",m,sep=""))[1:24],sd))
assign(paste("SDrecycled4.",m,sep=""),sapply(get(paste("tableESTSrecycled4.",m,sep=""))[1:24],sd))
###GJSTL5 N=1000, T=1, t=5
assign(paste("SD5.",m,sep=""),sapply(get(paste("tableESTS5.",m,sep=""))[1:24],sd))
assign(paste("SDrecycled5.",m,sep=""),sapply(get(paste("tableESTSrecycled5.",m,sep=""))[1:24],sd))
###GJSTL6 N=1000, T=1, t=7
assign(paste("SD6.",m,sep=""),sapply(get(paste("tableESTS6.",m,sep=""))[1:24],sd))
assign(paste("SDrecycled6.",m,sep=""),sapply(get(paste("tableESTSrecycled6.",m,sep=""))[1:24],sd))
m=m+1
if(m>27){break}
}
tableESTS5.1
dim(tableESTS4.1)
dim(tableESTS5.1)
tableESTS4.1[,1]
tableESTS4.1[1,]
tableESTS5.1[1,]
tableESTS6.1[1,]
#compute sd for all parameter combinations
m=1
repeat{
###GSTL1 N=1000, T=1
assign(paste("SD1.",m,sep=""),sapply(get(paste("tableESTS1.",m,sep=""))[1:24],sd))
assign(paste("SDrecycled1.",m,sep=""),sapply(get(paste("tableESTSrecycled1.",m,sep=""))[1:24],sd))
###GSTL2 N=100000, T=1
assign(paste("SD2.",m,sep=""),sapply(get(paste("tableESTS2.",m,sep=""))[1:24],sd))
assign(paste("SDrecycled2.",m,sep=""),sapply(get(paste("tableESTSrecycled2.",m,sep=""))[1:24],sd))
###GJSTL3 N=100000, T=0.5
assign(paste("SD3.",m,sep=""),sapply(get(paste("tableESTS3.",m,sep=""))[1:24],sd))
assign(paste("SDrecycled3.",m,sep=""),sapply(get(paste("tableESTSrecycled3.",m,sep=""))[1:24],sd))
###GJSTL4 N=1000, T=0.5
assign(paste("SD4.",m,sep=""),sapply(get(paste("tableESTS4.",m,sep=""))[1:24],sd))
assign(paste("SDrecycled4.",m,sep=""),sapply(get(paste("tableESTSrecycled4.",m,sep=""))[1:24],sd))
###GJSTL5 N=1000, T=1, t=5
assign(paste("SD5.",m,sep=""),sapply(get(paste("tableESTS5.",m,sep=""))[1:24],sd))
assign(paste("SDrecycled5.",m,sep=""),sapply(get(paste("tableESTSrecycled5.",m,sep=""))[1:14],sd))
###GJSTL6 N=1000, T=1, t=7
assign(paste("SD6.",m,sep=""),sapply(get(paste("tableESTS6.",m,sep=""))[1:24],sd))
assign(paste("SDrecycled6.",m,sep=""),sapply(get(paste("tableESTSrecycled6.",m,sep=""))[1:18],sd))
m=m+1
if(m>27){break}
}
#compute sd for all parameter combinations
m=1
repeat{
###GSTL1 N=1000, T=1
assign(paste("SD1.",m,sep=""),sapply(get(paste("tableESTS1.",m,sep=""))[1:24],sd))
assign(paste("SDrecycled1.",m,sep=""),sapply(get(paste("tableESTSrecycled1.",m,sep=""))[1:24],sd))
###GSTL2 N=100000, T=1
assign(paste("SD2.",m,sep=""),sapply(get(paste("tableESTS2.",m,sep=""))[1:24],sd))
assign(paste("SDrecycled2.",m,sep=""),sapply(get(paste("tableESTSrecycled2.",m,sep=""))[1:24],sd))
###GJSTL3 N=100000, T=0.5
assign(paste("SD3.",m,sep=""),sapply(get(paste("tableESTS3.",m,sep=""))[1:24],sd))
assign(paste("SDrecycled3.",m,sep=""),sapply(get(paste("tableESTSrecycled3.",m,sep=""))[1:24],sd))
###GJSTL4 N=1000, T=0.5
assign(paste("SD4.",m,sep=""),sapply(get(paste("tableESTS4.",m,sep=""))[1:24],sd))
assign(paste("SDrecycled4.",m,sep=""),sapply(get(paste("tableESTSrecycled4.",m,sep=""))[1:24],sd))
###GJSTL5 N=1000, T=1, t=5
assign(paste("SD5.",m,sep=""),sapply(get(paste("tableESTS5.",m,sep=""))[1:14],sd))
assign(paste("SDrecycled5.",m,sep=""),sapply(get(paste("tableESTSrecycled5.",m,sep=""))[1:14],sd))
###GJSTL6 N=1000, T=1, t=7
assign(paste("SD6.",m,sep=""),sapply(get(paste("tableESTS6.",m,sep=""))[1:18],sd))
assign(paste("SDrecycled6.",m,sep=""),sapply(get(paste("tableESTSrecycled6.",m,sep=""))[1:18],sd))
m=m+1
if(m>27){break}
}
#compute MSE for all parameter combinations
ColCalcRMSE<-function(A,b){
RMSE=vector(length=length(b))
for(i in 1:length(b)){
RMSE[i]=sqrt(mean((A[,i]-b[i])^2))
}
RMSE
}
m=1
repeat{
###GSTL1 N=1000, T=1
assign(paste("RMSE1.",m,sep=""),ColCalcRMSE(get(paste("tableESTS1.",m,sep=""))[1:24],parameters2[m,]))
assign(paste("RMSErecycled1.",m,sep=""),ColCalcRMSE(get(paste("tableESTSrecycled1.",m,sep=""))[1:24],parameters2[m,]))
###GSTL2 N=100000, T=1
assign(paste("RMSE2.",m,sep=""),ColCalcRMSE(get(paste("tableESTS2.",m,sep=""))[1:24],parameters[m,]))
assign(paste("RMSErecycled2.",m,sep=""),ColCalcRMSE(get(paste("tableESTSrecycled2.",m,sep=""))[1:24],parameters[m,]))
###GJSTL3 N=100000, T=0.5
assign(paste("RMSE3.",m,sep=""),ColCalcRMSE(get(paste("tableESTS3.",m,sep=""))[1:24],parameters[m,]))
assign(paste("RMSErecycled3.",m,sep=""),ColCalcRMSE(get(paste("tableESTSrecycled3.",m,sep=""))[1:24],parameters[m,]))
###GJSTL4 N=1000, T=0.5
assign(paste("RMSE4.",m,sep=""),ColCalcRMSE(get(paste("tableESTS4.",m,sep=""))[1:24],parameters[m,]))
assign(paste("RMSErecycled4.",m,sep=""),ColCalcRMSE(get(paste("tableESTSrecycled4.",m,sep=""))[1:24],parameters[m,]))
###GJSTL5 N=1000, T=1, t=5
assign(paste("RMSE5.",m,sep=""),ColCalcRMSE(get(paste("tableESTS5.",m,sep=""))[1:14],parameters[m,]))
assign(paste("RMSErecycled5.",m,sep=""),ColCalcRMSE(get(paste("tableESTSrecycled5.",m,sep=""))[1:14],parameters[m,]))
###GJSTL6 N=1000, T=1, t-7
assign(paste("RMSE6.",m,sep=""),ColCalcRMSE(get(paste("tableESTS6.",m,sep=""))[1:18],parameters[m,]))
assign(paste("RMSErecycled6.",m,sep=""),ColCalcRMSE(get(paste("tableESTSrecycled6.",m,sep=""))[1:18],parameters[m,]))
m=m+1
if(m>27){break}
}
#compute MSE for all parameter combinations
ColCalcRMSE<-function(A,b){
RMSE=vector(length=length(b))
for(i in 1:length(b)){
RMSE[i]=sqrt(mean((A[,i]-b[i])^2))
}
RMSE
}
m=1
repeat{
assign(paste("tableESTS.",m,sep=""),read.table(paste("~/Dropbox/Project/Simulations100000/",m,".ests.txt",sep=""), sep=" "))
assign(paste("tableESTSrecycled.",m,sep=""),read.table(paste("~/Dropbox/Project/Simulations100000/",m,".estsRECYCLED.txt",sep=""), sep=" "))
m=m+1
if(m>27){break}
}
par(mfrow=c(3,3),oma=c(3,5,2,4),mai=c(0.1,0.1,0.1,0.1))
#1
combine <- list(tableESTSrecycled.27[,1],tableESTS.27[,1],tableESTSrecycled.24[,1],tableESTS.24[,1],tableESTSrecycled.21[,1],tableESTS.21[,1])  # create a list of vectors to be bound
max.length <- max(sapply(combine, length))
matrix=do.call(cbind, lapply(combine, function(.vec){
c(.vec, rep(NA, max.length - length(.vec)))
}))
boxplot(matrix, col=(c(colors[2],colors[3],colors[2],colors[3], colors[2],colors[3])),ylim=c(0,1), axes=FALSE)
box()
axis(side=2, las=2, cex=0.7)
abline(h=0.2)
mtext(side = 3, outer=FALSE, text=bquote(paste(lambda," = ",0.2)), line = 1, cex=0.7)
#2
combine <- list(tableESTSrecycled.26[,1],tableESTS.26[,1],tableESTSrecycled.23[,1],tableESTS.23[,1],tableESTSrecycled.20[,1],tableESTS.20[,1])  # create a list of vectors to be bound
max.length <- max(sapply(combine, length))
matrix=do.call(cbind, lapply(combine, function(.vec){
c(.vec, rep(NA, max.length - length(.vec)))
}))
boxplot(matrix, col=(c(colors[2],colors[3],colors[2],colors[3], colors[2],colors[3])),ylim=c(0,1), axes=FALSE)
box()
abline(h=0.2)
mtext(side = 3, outer=FALSE, text=bquote(paste(lambda," = ",0.5)), line = 1, cex=0.7)
#3
combine <- list(tableESTSrecycled.25[,1],tableESTS.25[,1],tableESTSrecycled.22[,1],tableESTS.22[,1],tableESTSrecycled.19[,1],tableESTS.19[,1])  # create a list of vectors to be bound
max.length <- max(sapply(combine, length))
matrix=do.call(cbind, lapply(combine, function(.vec){
c(.vec, rep(NA, max.length - length(.vec)))
}))
boxplot(matrix, col=(c(colors[2],colors[3],colors[2],colors[3], colors[2],colors[3])),ylim=c(0,1), axes=FALSE)
box()
abline(h=0.2)
mtext(side = 3, outer=FALSE, text=bquote(paste(lambda," = ",0.9)), line = 1, cex=0.7)
mtext(side = 4, las=1, outer=FALSE, text=bquote(paste(phi," = ",0.2)), line = 1, cex=0.7)
#4
combine <- list(tableESTSrecycled.18[,1],tableESTS.18[,1],tableESTSrecycled.15[,1],tableESTS.15[,1],tableESTSrecycled.12[,1],tableESTS.12[,1])  # create a list of vectors to be bound
max.length <- max(sapply(combine, length))
matrix=do.call(cbind, lapply(combine, function(.vec){
c(.vec, rep(NA, max.length - length(.vec)))
}))
boxplot(matrix, col=(c(colors[2],colors[3],colors[2],colors[3], colors[2],colors[3])),ylim=c(0,1), axes=FALSE)
box()
axis(side=2, las=2, cex=0.7)
abline(h=0.5)
#5
combine <- list(tableESTSrecycled.17[,1],tableESTS.17[,1],tableESTSrecycled.14[,1],tableESTS.14[,1],tableESTSrecycled.11[,1],tableESTS.11[,1])  # create a list of vectors to be bound
max.length <- max(sapply(combine, length))
matrix=do.call(cbind, lapply(combine, function(.vec){
c(.vec, rep(NA, max.length - length(.vec)))
}))
boxplot(matrix, col=(c(colors[2],colors[3],colors[2],colors[3], colors[2],colors[3])),ylim=c(0,1), axes=FALSE)
box()
abline(h=0.5)
#6
combine <- list(tableESTSrecycled.16[,1],tableESTS.16[,1],tableESTSrecycled.13[,1],tableESTS.13[,1],tableESTSrecycled.10[,1],tableESTS.10[,1])  # create a list of vectors to be bound
max.length <- max(sapply(combine, length))
matrix=do.call(cbind, lapply(combine, function(.vec){
c(.vec, rep(NA, max.length - length(.vec)))
}))
boxplot(matrix, col=(c(colors[2],colors[3],colors[2],colors[3], colors[2],colors[3])),ylim=c(0,1), axes=FALSE)
box()
abline(h=0.5)
mtext(side = 4, las=1, outer=FALSE, text=bquote(paste(phi," = ",0.5)), line = 1, cex=0.7)
#7
combine <- list(tableESTSrecycled.9[,1],tableESTS.9[,1],tableESTSrecycled.6[,1],tableESTS.6[,1],tableESTSrecycled.3[,1],tableESTS.3[,1])  # create a list of vectors to be bound
max.length <- max(sapply(combine, length))
matrix=do.call(cbind, lapply(combine, function(.vec){
c(.vec, rep(NA, max.length - length(.vec)))
}))
boxplot(matrix, col=(c(colors[2],colors[3],colors[2],colors[3], colors[2],colors[3])),ylim=c(0,1), axes=FALSE)
box()
axis(side=2, las=2, cex=0.7)
abline(h=0.9)
mtext(text=bquote(paste("p=0.2","       ","p=0.5", "       ","p=0.9")), side = 1, line = 0.5, cex=0.7)
#8
combine <- list(tableESTSrecycled.8[,1],tableESTS.8[,1],tableESTSrecycled.5[,1],tableESTS.5[,1],tableESTSrecycled.2[,1],tableESTS.2[,1])  # create a list of vectors to be bound
max.length <- max(sapply(combine, length))
matrix=do.call(cbind, lapply(combine, function(.vec){
c(.vec, rep(NA, max.length - length(.vec)))
}))
boxplot(matrix, col=(c(colors[2],colors[3],colors[2],colors[3], colors[2],colors[3])),ylim=c(0,1), axes=FALSE)
box()
abline(h=0.9)
mtext(text=bquote(paste("p=0.2","       ","p=0.5", "       ","p=0.9")), side = 1, line = 0.5, cex=0.7)
#9
combine <- list(tableESTSrecycled.7[,1],tableESTS.7[,1],tableESTSrecycled.4[,1],tableESTS.4[,1],tableESTSrecycled.1[,1],tableESTS.1[,1])  # create a list of vectors to be bound
max.length <- max(sapply(combine, length))
matrix=do.call(cbind, lapply(combine, function(.vec){
c(.vec, rep(NA, max.length - length(.vec)))
}))
boxplot(matrix, col=(c(colors[2],colors[3],colors[2],colors[3], colors[2],colors[3])),ylim=c(0,1), axes=FALSE)
box()
abline(h=0.9)
mtext(side = 4, las=1, outer=FALSE, text=bquote(paste(phi," = ",0.9)), line = 1, cex=0.7)
mtext(text=bquote(paste("p=0.2","       ","p=0.5", "       ","p=0.9")), side = 1, line = 0.5, cex=0.7)
mtext(side = 2, outer=TRUE, "Survival Estimates", line = 2, cex=0.7)
par(fig = c(0, 1, 0, 1), oma = c(0, 0, 0, 0), mar = c(0, 0, 0, 0), new = TRUE)
plot(0, 0, type = "n", bty = "n", xaxt = "n", yaxt = "n")
legend("bottom", c("With Recycled","Without Recycled"), xpd = TRUE, horiz = TRUE, inset = c(0, 0), bty = "n", pch = c(15,15), col = c(colors[2],colors[3]), cex = 1)
parameters2
parameters[3,]
nsample=5
b=numeric(length=nsample) #probability of birth/immigration (sum to 1)
bstar=numeric(length=nsample) # expected fraction of population remaining entering the population
b[1:nsample]=1/nsample
bstar_to_b<-function(samp_time,std_bstar,nsample)
{ if(samp_time==1){b=std_bstar[samp_time]}
else{ b=1;
for(u in 1:(samp_time-1))
{ b=b*(1-std_bstar[u]);}
b=b*std_bstar[samp_time];
}
}
parameters3<-matrix(0,nrow=27,ncol=3+10+10+1)
parameters3[,1]=globalPhi
parameters3[,2]=globalP
parameters3[,3]=globalLambda
for(i in 1:5){
parameters3[,i+3]=rep(b[i],27)
}
parameters3
parameters3<-matrix(0,nrow=27,ncol=14)
parameters3[,1]=globalPhi
parameters3[,2]=globalP
parameters3[,3]=globalLambda
for(i in 1:5){
parameters3[,i+3]=rep(b[i],27)
}
parameters3[,9]=1000*b[1]
for(j in 1:27){
for(i in 2:5){
parameters3[j,i+8]=parameters3[j,i+7]*globalPhi[j]+1000*b[i]
}
}
parameters3
parameters3[,14]=1000
nsample=7
b=numeric(length=nsample) #probability of birth/immigration (sum to 1)
bstar=numeric(length=nsample) # expected fraction of population remaining entering the population
b[1:nsample]=1/nsample
bstar_to_b<-function(samp_time,std_bstar,nsample)
{ if(samp_time==1){b=std_bstar[samp_time]}
else{ b=1;
for(u in 1:(samp_time-1))
{ b=b*(1-std_bstar[u]);}
b=b*std_bstar[samp_time];
}
}
parameters4<-matrix(0,nrow=27,ncol=18)
parameters4[,1]=globalPhi
parameters4[,2]=globalP
parameters4[,3]=globalLambda
for(i in 1:7){
parameters4[,i+3]=rep(b[i],27)
}
parameters4<-matrix(0,nrow=27,ncol=18)
parameters4[,1]=globalPhi
parameters4[,2]=globalP
parameters4[,3]=globalLambda
for(i in 1:7){
parameters4[,i+3]=rep(b[i],27)
}
parameters4[,11]=1000*b[1]
for(j in 1:27){
for(i in 2:5){
parameters4[j,i+10]=parameters4[j,i+9]*globalPhi[j]+1000*b[i]
}
}
parameters4[,18]=1000
parameters4
parameters4<-matrix(0,nrow=27,ncol=18)
parameters4[,1]=globalPhi
parameters4[,2]=globalP
parameters4[,3]=globalLambda
for(i in 1:7){
parameters4[,i+3]=rep(b[i],27)
}
parameters4[,11]=1000*b[1]
for(j in 1:27){
for(i in 2:7){
parameters4[j,i+10]=parameters4[j,i+9]*globalPhi[j]+1000*b[i]
}
}
parameters4[,18]=1000
parameters4
